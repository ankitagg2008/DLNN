{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "0663e7da",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import cv2\n",
    "from PIL import Image\n",
    "import os\n",
    "from skimage import color\n",
    "from skimage.feature import hog\n",
    "from sklearn import svm\n",
    "from sklearn.neighbors import KNeighborsClassifier # using 1NN\n",
    "from sklearn.svm import SVC\n",
    "from sklearn.metrics import accuracy_score\n",
    "from tqdm import tqdm \n",
    "from torchvision.utils import make_grid\n",
    "from torchvision.utils import save_image"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f927e50a",
   "metadata": {},
   "source": [
    "# 1. Download the [cow teat datasets](https://github.com/YoushanZhang/SCTL) (10 points) resize image to (224, 224)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ab0c625d",
   "metadata": {},
   "source": [
    "### (1). Create a train data loader that returns image arrays and labels"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "18b0b565",
   "metadata": {},
   "outputs": [],
   "source": [
    "def train_data_loader(train_dirs):\n",
    "    # Initialize empty lists for to store image arrays and labels\n",
    "    image_arrays = []\n",
    "    image_labels = []\n",
    "   \n",
    "    # loop to navitage all directories and read information from all the image files\n",
    "    for label, directory in enumerate(sorted(os.listdir(train_dirs))):\n",
    "        path = os.path.join(train_dirs, directory)\n",
    "\n",
    "        # check if it's a directory\n",
    "        if not os.path.isdir(path):\n",
    "            continue\n",
    "\n",
    "        # Iterate over image files in the directory\n",
    "        for img_file in os.listdir(path):\n",
    "            img_path = os.path.join(path, img_file)\n",
    "\n",
    "            # resize and store images\n",
    "            img = cv2.resize(plt.imread(img_path).copy(), (224, 224))\n",
    "            image_labels.append(label)\n",
    "            image_arrays.append(img)\n",
    "            \n",
    "    return image_arrays, image_labels"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "95c75bdb",
   "metadata": {},
   "source": [
    "### (2). Create a test data loader that returns image arrays and file names"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "541e9cb4",
   "metadata": {},
   "outputs": [],
   "source": [
    "def test_data_loader(data_dir):\n",
    "    # Get a list of image files in the test data directory\n",
    "    image_files = [f for f in os.listdir(data_dir) if f.endswith(\".jpg\")]\n",
    "    \n",
    "    # Initialize lists for data and file names\n",
    "    image_arrays = []\n",
    "    image_names = []\n",
    "    \n",
    "    # Iterate over the image files\n",
    "    for file in image_files:\n",
    "        # Get the full path of the image\n",
    "        path = os.path.join(data_dir, file)\n",
    "        \n",
    "        # Read and preprocess the image\n",
    "        img = cv2.resize(plt.imread(path).copy(), (224, 224))\n",
    "        #img = img.astype(np.float32) / 255.0\n",
    "        \n",
    "        # Append the preprocessed image and file name to the lists\n",
    "        image_arrays.append(img)\n",
    "        image_names.append(file)\n",
    "    \n",
    "    # Convert lists to NumPy arrays and return\n",
    "    return image_arrays, image_names\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bad569b2",
   "metadata": {},
   "source": [
    "### (3). Print image arrays, labels and file names dimensions "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9e09431a",
   "metadata": {},
   "source": [
    "### Training Dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "c273b98a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training Dataset Array: (1149, 224, 224, 3)\n",
      "Training Label Shape: (1149,)\n"
     ]
    }
   ],
   "source": [
    "train_loader = r'C:\\AKA\\Backup Dell Laptop\\D Drive\\YU\\Semester 2\\Neural Network\\DLNN\\Assignment_Week5\\Homework Week5\\Homework Week5\\Training'\n",
    "training_array, training_labels = train_data_loader(train_loader)\n",
    "training_array, training_labels = np.array(training_array), np.array(training_labels)\n",
    "\n",
    "print(\"Training Dataset Array:\",training_array.shape )\n",
    "print(\"Training Label Shape:\",training_labels.shape )"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "29f15e42",
   "metadata": {},
   "source": [
    "**Observation:**\n",
    "   - The training dataset contains total 1149 images of size 224, 224 and has 3 channels."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e77b0d89",
   "metadata": {},
   "source": [
    "### Test Dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "a6530b3b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test Dataset Array: (380, 224, 224, 3)\n",
      "Test File Names Extracted: (380,)\n"
     ]
    }
   ],
   "source": [
    "# Example usage\n",
    "test_loader=r'C:\\AKA\\Backup Dell Laptop\\D Drive\\YU\\Semester 2\\Neural Network\\DLNN\\Assignment_Week5\\Homework Week5\\Homework Week5\\Test_Data'\n",
    "test_array, test_file_name = test_data_loader(test_loader)\n",
    "test_array, test_file_name = np.array(test_array), np.array(test_file_name)\n",
    "\n",
    "print(\"Test Dataset Array:\",test_array.shape )\n",
    "print(\"Test File Names Extracted:\",test_file_name.shape )\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f6afa108",
   "metadata": {},
   "source": [
    "**Observation:**\n",
    "   - The test dataset contains total 380 images of size 224, 224 and has 3 channels."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "79c5ec7c",
   "metadata": {},
   "source": [
    "# 2. Extract features of training and test images using HOG (20 points)\n",
    "Please print the size of extracted features, e.g., training features: 1149 * d, test features: 380 *d"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "cd8f13f9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training HOG features: 1149 * 11664\n"
     ]
    }
   ],
   "source": [
    "# Initialize lists to store features and labels\n",
    "train_hog_features = []\n",
    "train_hog_labels = []\n",
    "\n",
    "# Extract features for training images\n",
    "for i, img in enumerate(training_array):\n",
    "    img_gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n",
    "  \n",
    "    # Compute HOG descriptors for each grayscale image\n",
    "    features = hog(img_gray, pixels_per_cell=(16, 16), transform_sqrt=False)\n",
    "    train_hog_features.append(features)\n",
    "    train_hog_labels.append(training_labels[i])\n",
    "    \n",
    "# Convert feature lists to numpy arrays\n",
    "train_hog_features = np.array(train_hog_features)\n",
    "train_hog_labels = np.array(train_hog_labels)\n",
    "\n",
    "# Print the size of extracted features\n",
    "print(f\"Training HOG features: {train_hog_features.shape[0]} * {train_hog_features.shape[1]}\")   "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "eacabc35",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test HOG features: 380 * 11664\n"
     ]
    }
   ],
   "source": [
    "# Initialize lists to store features and labels\n",
    "test_hog_features = []\n",
    "test_hog_labels = []\n",
    "\n",
    "# Extract features for test images\n",
    "for i, img in enumerate(test_array):\n",
    "    img_gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n",
    "    \n",
    "    # Compute HOG descriptors for each grayscale image\n",
    "    features = hog(img_gray, pixels_per_cell=(16, 16), transform_sqrt=True)\n",
    "    \n",
    "    test_hog_features.append(features)\n",
    "    test_hog_labels.append(test_file_name[i])\n",
    "\n",
    "# Convert feature lists to numpy arrays\n",
    "test_hog_features = np.array(test_hog_features)\n",
    "test_hog_labels = np.array(test_hog_labels)\n",
    "\n",
    "# Print the size of extracted features\n",
    "print(f\"Test HOG features: {test_hog_features.shape[0]} * {test_hog_features.shape[1]}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9f5339f5",
   "metadata": {},
   "source": [
    "# 3. Extract features of training and test images using SIFT (20 points)\n",
    "Please print the size of extracted features, e.g., training features: 1149 * d, test features: 380 *d"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "3e9f0084",
   "metadata": {},
   "outputs": [],
   "source": [
    "def extract_sift_features(image):\n",
    "    sift = cv2.xfeatures2d.SIFT_create(50)\n",
    "    keypoints, descriptors = sift.detectAndCompute(image,None)\n",
    "    return descriptors"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "87c0348d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training features: 1149 * 128\n"
     ]
    }
   ],
   "source": [
    "# Initialize lists to store SIFT features\n",
    "train_sift_features = []\n",
    "\n",
    "# Load the training images\n",
    "for img in training_array:\n",
    "    gray1 = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n",
    "    descriptors = extract_sift_features(gray1)\n",
    "    if descriptors is not None:\n",
    "        train_sift_features.append(descriptors.flatten()[:128])\n",
    "    else:\n",
    "        train_sift_features.append(np.array([0]*(128)).flatten())\n",
    "\n",
    "# Convert the lists to NumPy arrays\n",
    "sift_train_features = np.array(train_sift_features)\n",
    "\n",
    "# Print the size of the extracted features\n",
    "print(f\"Training features: {sift_train_features.shape[0]} * {sift_train_features.shape[1]}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "f00bf390",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test features: 380 * 128\n"
     ]
    }
   ],
   "source": [
    "# Initialize lists to store SIFT features\n",
    "test_sift_features = []\n",
    "\n",
    "# Load the test images\n",
    "for img in test_array:\n",
    "    gray1 = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n",
    "    descriptors = extract_sift_features(gray1)\n",
    "    if descriptors is not None:\n",
    "        test_sift_features.append(descriptors.flatten()[:128])\n",
    "    else:\n",
    "        test_sift_features.append(np.array([0]*(128)).flatten())\n",
    "\n",
    "# Convert the lists to NumPy arrays\n",
    "sift_test_features = np.array(test_sift_features)\n",
    "\n",
    "# Print the size of the extracted features\n",
    "print(f\"Test features: {sift_test_features.shape[0]} * {sift_test_features.shape[1]}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "753188e2",
   "metadata": {},
   "source": [
    "# 4. Extract features of training and test images using SURF (20 points)\n",
    "Please print the size of extracted features, e.g., training features: 1149 * d, test features: 380 *d"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "1c85f786",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Function to extract SURF features\n",
    "def extract_surf_features(image):\n",
    "    surf = cv2.xfeatures2d.SURF_create()\n",
    "    keypoints, descriptors = surf.detectAndCompute(image, None)\n",
    "    return descriptors"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "5abd5f46",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training features: 1149 * 128\n"
     ]
    }
   ],
   "source": [
    "# Initialize lists to store SURF features\n",
    "train_surf_features = []\n",
    "\n",
    "# Load the training images\n",
    "for img in training_array:\n",
    "    descriptors = extract_surf_features(img)\n",
    "    if descriptors is not None:\n",
    "        train_surf_features.append(descriptors.flatten()[:128])\n",
    "    else:\n",
    "        train_surf_features.append(np.zeros(128, dtype=np.float32))\n",
    "\n",
    "# Convert the lists to NumPy arrays\n",
    "surf_train_features = np.array(train_surf_features, dtype=np.float32)\n",
    "\n",
    "# Print the size of the extracted features\n",
    "print(f\"Training features: {surf_train_features.shape[0]} * {surf_train_features.shape[1]}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "95d5562b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test features: 380 * 128\n"
     ]
    }
   ],
   "source": [
    "# Initialize lists to store SURF features\n",
    "test_surf_features = []\n",
    "\n",
    "# Load the test images\n",
    "for img in test_array:\n",
    "    descriptors = extract_surf_features(img)\n",
    "    if descriptors is not None:\n",
    "        test_surf_features.append(descriptors.flatten()[:128])\n",
    "    else:\n",
    "        test_surf_features.append(np.zeros(128, dtype=np.float32))\n",
    "\n",
    "# Convert the lists to NumPy arrays\n",
    "surf_test_features = np.array(test_surf_features, dtype=np.float32)\n",
    "\n",
    "# Print the size of the extracted features\n",
    "print(f\"Test features: {surf_test_features.shape[0]} * {surf_test_features.shape[1]}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dae7fb43",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "b0e3e068",
   "metadata": {},
   "source": [
    "# 5. Call SVM and kNN from scikit-learn and train the extracted HOG, SIFT and SURF features, respectively, save three CSV files of test dataset using three features (10 points)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "68704a6d",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "3fd101cf",
   "metadata": {},
   "source": [
    "# 6. Report the accuracy using Cow_teat_classfication_accuracy software, please attach the results image here (20 points)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "89ea49db",
   "metadata": {},
   "source": [
    "### (1). SVM and KNN using HOG features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "8ef54b9c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Train SVM classifier on HOG features\n",
    "svmHog = svm.SVC(kernel='rbf')\n",
    "svmHog.fit(train_hog_features, train_hog_labels)\n",
    "\n",
    "# Predict using SVM classifier\n",
    "svmHog_preds = []\n",
    "for features in test_hog_features:\n",
    "    svmHog_preds.append(svmHog.predict([features]))\n",
    "\n",
    "#Convert numpy array to dataframe\n",
    "svm_preds = pd.DataFrame(svmHog_preds, test_hog_labels)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "cb8b42dd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "HOG SVM predictions saved to CSV files\n"
     ]
    }
   ],
   "source": [
    "# Write predictions to CSV files\n",
    "svm_preds.to_csv(r\"C:\\AKA\\Backup Dell Laptop\\D Drive\\YU\\Semester 2\\Neural Network\\DLNN\\Output\\hog_test_predictions_svm.csv\")\n",
    "print(\"HOG SVM predictions saved to CSV files\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5411fbc7",
   "metadata": {},
   "source": [
    "#### SVM Accuracy with HOG Features"
   ]
  },
  {
   "attachments": {
    "acc_svm_hog-2.png": {
     "image/png": ""
    }
   },
   "cell_type": "markdown",
   "id": "2aa24c2c",
   "metadata": {},
   "source": [
    "![acc_svm_hog-2.png](attachment:acc_svm_hog-2.png)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "2b302dcc",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Train KNN classifier on HOG features\n",
    "knnHog = KNeighborsClassifier(n_neighbors=2)\n",
    "knnHog.fit(train_hog_features, train_hog_labels)\n",
    "  \n",
    "# Predict using KNN classifier\n",
    "knnHog_preds = []\n",
    "for features in test_hog_features:\n",
    "    knnHog_preds.append(knnHog.predict([features]))\n",
    "\n",
    "#Convert numpy array to dataframe\n",
    "knn_preds = pd.DataFrame(knnHog_preds, test_hog_labels)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "0fb6a11d",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "HOG KNN predictions saved to CSV files\n"
     ]
    }
   ],
   "source": [
    "# Write predictions to CSV files\n",
    "knn_preds.to_csv(r\"C:\\AKA\\Backup Dell Laptop\\D Drive\\YU\\Semester 2\\Neural Network\\DLNN\\Output\\hog_test_predictions_knn.csv\")\n",
    "print(\"HOG KNN predictions saved to CSV files\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "be7ac2be",
   "metadata": {},
   "source": [
    "#### KNN Accuracy with HOG Features"
   ]
  },
  {
   "attachments": {
    "acc_knn_hog.png": {
     "image/png": ""
    }
   },
   "cell_type": "markdown",
   "id": "4c790409",
   "metadata": {},
   "source": [
    "![acc_knn_hog.png](attachment:acc_knn_hog.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1163e551",
   "metadata": {},
   "source": [
    "### (2). SVM and KNN using SIFT features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "6f374e1e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Pass 1 Started at 2023-10-11 03:48:42.842531\n"
     ]
    }
   ],
   "source": [
    "import datetime\n",
    "\n",
    "# Get the current date and time\n",
    "current_time = datetime.datetime.now()\n",
    "\n",
    "# Print with the current time\n",
    "print(f'Pass 1 Started at {current_time}')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e2fee072",
   "metadata": {},
   "source": [
    "#### SVM Accuracy with SIFT Features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f818afb9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test 1 Started 2023-10-11 03:48:42.842531\n",
      "Pass 1 Started at 2023-10-11 03:48:42.842531\n",
      "Pass 1 completed at 2023-10-11 03:48:42.842531\n",
      "Pass 2 Started at 2023-10-11 03:48:42.842531\n"
     ]
    }
   ],
   "source": [
    "print(f'Test 1 Started {current_time}')\n",
    "#Train SVM classifier on SIFT features\n",
    "print(f'Pass 1 Started at {current_time}')\n",
    "svmSift = svm.SVC(kernel='linear')\n",
    "print(f'Pass 1 completed at {current_time}')\n",
    "print(f'Pass 2 Started at {current_time}')\n",
    "svmSift.fit(sift_train_features,training_labels)\n",
    "print(f'Pass 2 Completed at {current_time}')\n",
    "\n",
    "# Predict using SVM classifier\n",
    "print(f'Pass 3 Started at {current_time}')\n",
    "svmSiftPred = svmSift.predict(sift_test_features)\n",
    "print(f'Pass 3 Completed at {current_time}')\n",
    "print(f'Pass 4 Started at {current_time}')\n",
    "# Convert numpy array to dataframe\n",
    "svm_preds_df = pd.DataFrame(test_file_name, svmSiftPred)\n",
    "print(f'Pass 4 Completed at {current_time}')\n",
    "print(f'Pass 5 Started at {current_time}')\n",
    "# Write predictions to CSV files\n",
    "svm_preds_df.to_csv(r\"C:\\AKA\\Backup Dell Laptop\\D Drive\\YU\\Semester 2\\Neural Network\\DLNN\\Output\\sift_test_predictions_svm_linear.csv\", index=False, header=False)\n",
    "print(\"SIFT predictions saved to CSV files\")\n",
    "print(f'Pass 5 Completed at {current_time}')\n",
    "print(f'Test 1 finished {current_time}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "71bde92e",
   "metadata": {},
   "outputs": [],
   "source": [
    "print(f'Test 2 Started {current_time}')\n",
    "#Train SVM classifier on SIFT features\n",
    "print(f'Pass 1 Started at {current_time}')\n",
    "svmSift = svm.SVC(kernel='rbf')\n",
    "print(f'Pass 1 completed at {current_time}')\n",
    "print(f'Pass 2 Started at {current_time}')\n",
    "svmSift.fit(sift_train_features,training_labels)\n",
    "print(f'Pass 2 Completed at {current_time}')\n",
    "\n",
    "# Predict using SVM classifier\n",
    "print(f'Pass 3 Started at {current_time}')\n",
    "svmSiftPred = svmSift.predict(sift_test_features)\n",
    "print(f'Pass 3 Completed at {current_time}')\n",
    "print(f'Pass 4 Started at {current_time}')\n",
    "# Convert numpy array to dataframe\n",
    "svm_preds_df = pd.DataFrame(test_file_name, svmSiftPred)\n",
    "print(f'Pass 4 Completed at {current_time}')\n",
    "print(f'Pass 5 Started at {current_time}')\n",
    "# Write predictions to CSV files\n",
    "svm_preds_df.to_csv(r\"C:\\AKA\\Backup Dell Laptop\\D Drive\\YU\\Semester 2\\Neural Network\\DLNN\\Output\\sift_test_predictions_svm_rbf.csv\", index=False, header=False)\n",
    "print(\"SIFT predictions saved to CSV files\")\n",
    "print(f'Pass 5 Completed at {current_time}')\n",
    "print(f'Test 2 finished {current_time}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9221b371",
   "metadata": {},
   "outputs": [],
   "source": [
    "print(f'Test 3 Started {current_time}')\n",
    "#Train SVM classifier on SIFT features\n",
    "print(f'Pass 1 Started at {current_time}')\n",
    "svmSift = svm.SVC((kernel='linear', C=1.0, gamma='scale', max_iter=-1))\n",
    "print(f'Pass 1 completed at {current_time}')\n",
    "print(f'Pass 2 Started at {current_time}')\n",
    "svmSift.fit(sift_train_features,training_labels)\n",
    "print(f'Pass 2 Completed at {current_time}')\n",
    "\n",
    "# Predict using SVM classifier\n",
    "print(f'Pass 3 Started at {current_time}')\n",
    "svmSiftPred = svmSift.predict(sift_test_features)\n",
    "print(f'Pass 3 Completed at {current_time}')\n",
    "print(f'Pass 4 Started at {current_time}')\n",
    "# Convert numpy array to dataframe\n",
    "svm_preds_df = pd.DataFrame(test_file_name, svmSiftPred)\n",
    "print(f'Pass 4 Completed at {current_time}')\n",
    "print(f'Pass 5 Started at {current_time}')\n",
    "# Write predictions to CSV files\n",
    "svm_preds_df.to_csv(r\"C:\\AKA\\Backup Dell Laptop\\D Drive\\YU\\Semester 2\\Neural Network\\DLNN\\Output\\sift_test_predictions_svm.csv\", index=False, header=False)\n",
    "print(\"SIFT predictions saved to CSV files\")\n",
    "print(f'Pass 5 Completed at {current_time}')\n",
    "print(f'Test 3 finished {current_time}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "da8e9e0e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# # Convert the lists to NumPy arrays\n",
    "# sift_train_features = np.array(train_sift_features, dtype=np.float32)\n",
    "# sift_test_features = np.array(test_sift_features, dtype=np.float32)\n",
    "\n",
    "# print('Pass 1 Completed')\n",
    "\n",
    "# # Ensure that your labels contain at least two classes for SVM\n",
    "# training_labels_subset = training_labels\n",
    "\n",
    "# print('Pass 2 Completed')\n",
    "\n",
    "# # Train SVM classifier on SIFT features with optimized hyperparameters\n",
    "# svmSift = svm.SVC(kernel='linear', C=1.0, gamma='scale', max_iter=-1)\n",
    "# svmSift.fit(sift_train_features, training_labels_subset)\n",
    "\n",
    "# print('Pass 3 Completed')\n",
    "\n",
    "# # # Convert the lists to NumPy arrays\n",
    "# # sift_train_features = np.array(train_sift_features[:5], dtype=np.float32)\n",
    "# # sift_test_features = np.array(test_sift_features[:5], dtype=np.float32)\n",
    "\n",
    "# # # Train SVM classifier on SIFT features with optimized hyperparameters\n",
    "# # svmSift = svm.SVC(kernel='linear', C=1.0, gamma='scale', max_iter=-1)\n",
    "# # svmSift.fit(sift_train_features[:5], training_labels[:5])\n",
    "\n",
    "# print('Pass 4 Started')\n",
    "\n",
    "# # Predict using SVM classifier with a progress bar\n",
    "# svmSiftPred = []\n",
    "# with tqdm(total=len(sift_test_features), desc=\"Predicting with SVM\") as pbar:\n",
    "#     for img in sift_test_features:\n",
    "#         prediction = svmSift.predict([img])\n",
    "#         svmSiftPred.append(prediction)\n",
    "#         pbar.update(1)\n",
    "        \n",
    "\n",
    "# print('Pass 4 Completed')\n",
    "\n",
    "# # # Predict using SVM classifier\n",
    "# # svmSiftPred = svmSift.predict(sift_test_features)\n",
    "\n",
    "# # Calculate accuracy\n",
    "# accuracy = accuracy_score(training_labels, svmSiftPred)\n",
    "# print(\"SVM Accuracy:\", accuracy)\n",
    "# print('Pass 5 Completed')\n",
    "\n",
    "# # Convert numpy array to a DataFrame\n",
    "# svm_preds_df = pd.DataFrame({'Actual': test_file_name, 'Predicted': svmSiftPred})\n",
    "# print('Pass 6 Completed')\n",
    "\n",
    "# # Write predictions to CSV files\n",
    "# svm_preds_df.to_csv(r\"C:\\AKA\\Backup Dell Laptop\\D Drive\\YU\\Semester 2\\Neural Network\\DLNN\\Output\\sift_test_predictions_svm.csv\", index=False, header=False)\n",
    "# print(\"SIFT predictions saved to CSV files\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b110bf85",
   "metadata": {},
   "source": [
    "#### KNN Accuracy with SIFT Features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3d014483",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Train KNN classifier on SIFT features\n",
    "knnSift = KNeighborsClassifier(n_neighbors=20, weights ='distance')\n",
    "knnSift.fit(sift_train_features, training_labels)\n",
    "\n",
    "# Predict using KNN classifier\n",
    "knnSiftPred = knnSift.predict(sift_test_features)\n",
    "\n",
    "# Convert numpy array to dataframe\n",
    "knn_preds_df = pd.DataFrame({'a':test_file_name, 'b':knnSiftPred})\n",
    "\n",
    "\n",
    "# Write predictions to CSV files\n",
    "knn_preds_df.to_csv(r\"C:\\AKA\\Backup Dell Laptop\\D Drive\\YU\\Semester 2\\Neural Network\\DLNN\\Output\\sift_test_predictions_knn.csv\", index=False, header=False)\n",
    "print(\"SIFT predictions saved to CSV files\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2908c75a",
   "metadata": {},
   "source": [
    "### (3). SVM and KNN using SURF features"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c4bcbf44",
   "metadata": {},
   "source": [
    "#### SVM Accuracy with Surf Features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "88a6129b",
   "metadata": {},
   "outputs": [],
   "source": [
    "train_surf_features = np.array(surf_train_features)\n",
    "test_surf_features = np.array(surf_test_features)\n",
    "\n",
    "# Train SVM classifier on SURF features\n",
    "svmSurf = svm.SVC(kernel='linear')\n",
    "svmSurf.fit(train_surf_features, training_labels)\n",
    "\n",
    "# Predict using SVM classifier\n",
    "svmSurfPred = svmSurf.predict(test_surf_features)\n",
    "\n",
    "# Convert numpy array to dataframe\n",
    "svm_preds_df = pd.DataFrame(test_file_name, svmSurfPred)\n",
    "\n",
    "# Write predictions to CSV files\n",
    "svm_preds_df.to_csv(r\"C:\\AKA\\Backup Dell Laptop\\D Drive\\YU\\Semester 2\\Neural Network\\DLNN\\Output\\surf_test_predictions_svm.csv\")\n",
    "print(\"Surf predictions saved to CSV files\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "708a13bd",
   "metadata": {},
   "source": [
    "#### KNN Accuracy with Surf Features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ff9fb829",
   "metadata": {},
   "outputs": [],
   "source": [
    "train_surf_features = np.array(surf_train_features)\n",
    "test_surf_features = np.array(surf_test_features)\n",
    "\n",
    "# Train KNN classifier on SURF features\n",
    "knnSurf = KNeighborsClassifier(n_neighbors=1)\n",
    "knnSurf.fit(train_surf_features, training_labels)\n",
    "\n",
    "# Predict using KNN classifier\n",
    "knnSurfPred = knnSurf.predict(test_surf_features)\n",
    "\n",
    "# Convert numpy array to dataframe\n",
    "knn_preds_df = pd.DataFrame(test_file_name, knnSurfPred)\n",
    "\n",
    "# Write predictions to CSV files\n",
    "knn_preds_df.to_csv(r\"C:\\AKA\\Backup Dell Laptop\\D Drive\\YU\\Semester 2\\Neural Network\\DLNN\\Output\\surf_test_predictions_knn.csv\")\n",
    "print(\"Surf predictions saved to CSV files\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cf698180",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "d78b7ccd",
   "metadata": {},
   "source": [
    "https://www.analyticsvidhya.com/blog/2019/10/detailed-guide-powerful-sift-technique-image-matching-python/\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
